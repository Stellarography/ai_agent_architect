/**
 * Root Reducer Configuration
 * 
 * This file serves as the central point for combining all Redux reducers in the application.
 * It uses Redux Toolkit's combineReducers to create a single reducer function that:
 * 
 * 1. Combines all individual feature reducers into one unified reducer
 * 2. Defines the shape of the entire application state tree
 * 3. Handles the distribution of actions to child reducers
 * 4. Manages both traditional Redux reducers and RTK Query API slices
 * 
 * Usage:
 * - Import feature reducers and add them to the combineReducers object
 * - Import API slices and add their reducers using the reducerPath
 * - The resulting rootReducer is used in the store configuration
 */

import { combineReducers } from '@reduxjs/toolkit';

// The root reducer combines all individual feature and API reducers
const rootReducer = combineReducers({
  // Feature reducers handle state updates for specific features/domains
  // Example: user: userReducer, auth: authReducer
  // exampleFeature: exampleReducer,

  // RTK Query API reducers handle cache state for API interactions
  // They are automatically generated by RTK Query and manage API cache state
  // [agentApi.reducerPath]: agentApi.reducer,
});

export default rootReducer;